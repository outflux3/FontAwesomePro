<?php

/**
 * JS module for Selectize.js
 * http://selectize.github.io/selectize.js/
 */

class FontAwesomePro extends ModuleJS implements ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title' 	=> 'Font Awesome Pro',
			'version' 	=> 104,
			'summary' 	=> 'Provides FontAwesome Pro css files for use in admin.',
			'href' 		=> 'http://fontawesome.io/',
			'autoload' 	=> 'template=admin',
		  );
	}


	protected static $configDefaults = array(
		'loadOption'  => [],
		'loadStyle'   => 'solid',
		//'loadBrands'  => 0,
		'removeFA'    => 0,
		'disableThis' => 0,
	);


	/**
	 * Data as used by the get/set functions
	 *
	 */
	protected $data = array();


	/**
	 * __construct() is the right place to init config vars before they'll get populated
	 *
	 */
	public function __construct() {

		foreach(self::$configDefaults as $key => $value) {
			$this->set($key, $value);
		}
	}


	/**
	 * Per the Module interface, Initialize the Process, loading any related CSS or JS files
	 *
	 */
	public function init() {
		parent::init();
	}



	public function replaceIconsList(HookEvent $event) {
		
		$event->replace = true;

		$inputfield = $event->object;

		bd($inputfield);

		$reflFoo = new ReflectionClass($inputfield);
		$options = $reflFoo->getProperty('options');
		$options->setAccessible(true);
		$icons = $options->getValue($inputfield); 

		$icons[] = 'fa-alarm-clock';

		//-------------

		$out = '';
		$attrs = $inputfield->getAttributes();
		$value = $attrs['value'];
		if($value && strpos($value, 'fa-') !== 0) $value = 'fa-' . $value;
		if($value) $inputfield->icon = $value;
		unset($attrs['value']);
		$out .= "\n<select " . $inputfield->getAttributesString($attrs) . ">";
		if(!$inputfield->getSetting('required')) $out .= "\n\t<option value=''></option>";
		foreach($icons as $option) {
			$option = trim($option); 
			$selected = $value == $option ? " selected='selected'" : "";
			$label = ucfirst(substr($option, 3)); 
			$label = str_replace('-', ' ', $label); 
			$out .= "\n\t<option$selected value='$option'>$label</option>";
		}
		$out .= "</select>&nbsp;&nbsp;";
		$out .=
			"<i class='fa fa-angle-right ui-priority-secondary'></i>&nbsp;" . 
			"<a class='InputfieldIconShowAll' target='_blank' href='#'>" . 
			"<small>" . $this->_('Show All Icons') . "</small></a>" . 
			"<div class='InputfieldIconAll'></div>";

		$event->return = $out;

	}

	/**
	 * Per the Module interface, Initialize the Process, loading any related CSS or JS files
	 *
	 */
	public function ready() {

		//$this->addHookAfter('InputfieldIcon::render', $this, 'replaceIconsList');


		$name = $this->classname();
		$info = $this->getModuleInfo();
		$version = (int) $info['version'];

		if($this->data['disableThis']) return;

		if($this->data['loadOption'] == 'webfonts') {
			$this->addHookAfter('AdminTheme::getExtraMarkup', $this, 'loadWebfonts');
		}

		if($this->data['loadOption'] == 'svg-framework') {
			$this->addHookAfter('AdminTheme::getExtraMarkup', $this, 'loadSVGFramework');
		}

		if($this->data['removeFA']) {

			//  reno & default: hook before getExtraMarkup
			if($this->user->admin_theme != 'AdminThemeUikit') {
				$this->addHookBefore('AdminTheme::getExtraMarkup', $this, 'removeFontAwesome');
			}

			if($this->user->admin_theme == 'AdminThemeUikit') {
				$this->addHookAfter('Page::render', $this, 'nullifyCoreFA', array('priority'=>1000));
			}

		}

	}


	public function loadWebfonts(HookEvent $event) {

		$name = $this->classname();
		$info = $this->getModuleInfo();
		$version = (int) $info['version'];

		$parts = $event->return;

		$styles = array(
			$this->config->urls->$name . "vendor/css/fontawesome.css?v=$version",
		);

		// Icon Style (regular, solid, light)
		$loadStyle = $this->data['loadStyle'];
		if($this->data['loadStyle'] != 'regular') {
			$styles[] = $this->config->urls->$name . "FontAwesomePro_regular.css?v=$version";
		}

		$styles[] = $this->config->urls->$name . "FontAwesomePro_{$loadStyle}.css?v=$version";
		$styles[] = $this->config->urls->$name . "FontAwesomePro_brands.css?v=$version";

		// if($this->data['loadBrands']) {
		// 	$styles[] = $this->config->urls->$name . "FontAwesomePro_brands.css?v=$version";
		// }

		$appendStyles = '';
		foreach($styles as $style) {
			$appendStyles .= "\n\t<link rel='stylesheet' href='{$style}'>";
		}

		$parts['head'] .= $appendStyles;
		$event->return = $parts;

	}


	/**
	 * Currently this only works with the solid icons; base files need to be loaded before pack files
	 * @return [type] [description]
	 */
	public function loadSVGFramework(HookEvent $event) {
		$name = $this->classname();
		$info = $this->getModuleInfo();
		$version = (int) $info['version'];
		$min = $this->config->debug ? '' : '.min';

		$parts = $event->return;

		$loadStyle = $this->data['loadStyle'];

		$scripts = array(
			$this->config->urls->$name . "vendor/js/fontawesome{$min}.js?v=$version",
			$this->config->urls->$name . "vendor/js/fa-v4-shims{$min}.js?v=$version", 
		);

		//$scripts['regular'] = $this->config->urls->$name . "vendor/js/fa-regular{$min}.js?v=$version";
		$scripts[$loadStyle] = $this->config->urls->$name . "vendor/js/fa-$loadStyle{$min}.js?v=$version";
		$scripts[] = $this->config->urls->$name . "vendor/js/fa-brands{$min}.js?v=$version";

		$appendScripts = '';
		foreach($scripts as $script) {
			$appendScripts .= "\n\t<script type='text/javascript' src='{$script}'></script>";
		}

		$parts['head'] .= $appendScripts;
		$event->return = $parts;

	}

	public function removeFontAwesome() {
		$styles = $this->config->styles;
		foreach($styles as $key => $value) {
			if(strpos($value, 'font-awesome') !== false) {
				$styles->remove($value);
			}
		}
	}

	/**
	 * super hacky
	 */
	public function nullifyCoreFA($event) {
		$name = $this->classname();
		$modRoot = $this->config->urls->$name;
		$root = $this->config->urls->root;
		if($root !== '/') {
			$modRoot = str_replace($root,'/',$modRoot);
		}
		$dummyFile = $modRoot . 'font-awesome-dummy.css';
		$search = '/wire/templates-admin/styles/font-awesome/css/font-awesome.min.css';
		$replace = $dummyFile;
		$event->return = str_replace($search,$replace,$event->return);
	}


	/**
	 * Return an InputfieldsWrapper of Inputfields used to configure the class
	 *
	 * @param array $data Array of config values indexed by field name
	 * @return InputfieldsWrapper
	 *
	 */
	public function getModuleConfigInputfields(array $data) {

		foreach(self::$configDefaults as $key => $value) {
			if(!isset($data[$key])||$data[$key]=="") $data[$key] = $value;
		}

		unset($data['cacheClear']);

		$wrapper = new InputFieldWrapper();

		//-------------------------------------------
		$f = wire('modules')->get("InputfieldSelect");
		$f->attr('name', 'loadOption');
		$f->label = "Load Options";
		$f->attr('value', (isset($data['loadOption']) ? $data['loadOption'] : 0));
		$f->addOption('webfonts', 'Web Fonts');
		$f->addOption('svg-framework', 'SVG Framework');
		$wrapper->add($f);

		//-------------------------------------------
		$f = wire('modules')->get("InputfieldSelect");
		$f->attr('name+id', 'loadStyle');
		$f->label = "Select Font Style";
		$f->attr('value', (isset($data['loadStyle']) ? $data['loadStyle'] : ''));
		$f->addOption('regular', 'Regular');
		$f->addOption('solid', 'Solid');
		$f->addOption('light', 'Light');
		$wrapper->add($f);

		// ------------------------------------------------------------------------
		// $f = wire('modules')->get('InputfieldCheckbox'); 
		// $f->attr('name', 'loadBrands');
		// $f->attr('value', 1);
		// if($data['loadBrands']) $f->attr('checked', 'checked'); 
		// $f->label = __('Load Brands Font (optional)'); 
		// $wrapper->add($f);


		// ------------------------------------------------------------------------
		$f = wire('modules')->get('InputfieldCheckbox'); 
		$f->attr('name', 'removeFA');
		$f->attr('value', 1);
		if($data['removeFA']) $f->attr('checked', 'checked'); 
		$f->label = __('Remove Core Font Awesome (recommended only for custom Admin Themes)'); 
		$f->columnWidth = 50;
		$wrapper->add($f);

		// ------------------------------------------------------------------------
		$f = wire('modules')->get('InputfieldCheckbox');
		$f->attr('name', 'disableThis');
		$f->attr('value', 1);
		if($data['disableThis']) $f->attr('checked', 'checked');
		$f->label = __('Disable Loading (instead of uninstall, this prevents Pro from loading.)');
		$wrapper->add($f);


		return $wrapper;


	}



}

